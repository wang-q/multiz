blastzWrapper replaced Blastz.
roast replaced autoMZ.            -- 05/07/2008 

This README2 shall replace the prvious README. -- 10/12/2005

Notice to previous users: 
1. Compiling is the same.
2. Input sequence files format is the same including naming issues.
3. New parameters are added to existing programs, and their default values shall give the same programs as before. e.g. the behavior of the programs with the same arguments you used before shall give the same result as before, otherwise please report to mhou@cse.psu.edu.
4. A new program "multic" is added intending to be new "multiz" eventually, and currently they have the same parameter list, see details below.
5. A new program called "roast" is added to run a series of multiz/multic to get reference-only multiple alignment by using a guide tree. roast and tba have similar parameters, see below for details.


Description and usage: values in parenthesis are defaults.
8. multiz
multiz.v10.6:  -- aligning two files of alignment blocks where top rows are always the reference, reference in both files cannot have duplicats
args: [R=?] [M=?] file1 file2 v? [out1 out2] [nohead] [all]
        R(30) radius in dynamic programming.
        M(1) minimum output width.
        out1 out2(null) null: stdout; out1 out2: file names for collecting unused input.
        nohead(null) null: output maf header; nohead: not to output maf header.
        all(null) null: not to output single-row blocks; all: output all blocks.

9. multic
multic.v11.1:  -- aligning two files of alignment blocks where top rows are always the reference, reference in both files can contain duplicats (different to multiz)
args: [R=?] [M=?] file1 file2 v? [out1 out2] [nohead] [all]
        R(30) radius in dynamic programming.
        M(1) minimum output width.
        out1 out2(null) null: stdout; out1 out2: file names for collecting unused input.
        nohead(null) null: output maf header; nohead: not to output maf header.
        all(null) null: not to output single-row blocks; all: output all blocks.

Examples
1. ENCODE multiple alignment with reference to human
1) using tba
	all_bz + F=human guid-tree blastz-spec-file
	tba + E=human P=multic guid-tree maf-source destination
With above commands, all_bz produces pairwise alignments using blastz, these alignments are in files with postfix of ".orig.maf"; and then all_bz reads files with ".orig.maf" and runs single_cov2 with reference of human, which means the single coverage property is only enforced on human when human is aligned to other species; while for pairwise alignment between two species other than human, reciprocal single coverage is enforced. This step produces pairwise alignment files with postfix of ".sing.maf". The purpose for keeping blastz output is to avoid running blastz repeatedly when the pairwise post processing program needs to be changed, e.g. choose single_cov2, reference-specified single_cov2, or TOAST in future. In those cases, you can run all_bz with "b=0" to specify not to run blastz again as long as the sequence files are the same and parameters for blastz are the same.

tba in this example utilizes multic. In tba, species including human are used as references to guide the alignment procedure. Since single coverage is only ensured for human, not for other species, multic instead of multiz shall be used.

2) using roast 
	all_bz + F=human guid-tree blastz-spec-file  // can be skipped
	roast + E=human guid-tree maf-source destination
The all_bz procedure can be skipped if all_bz is already done for running tba. But it does not hold for tba if roast is run first, since tba requires more pairwise alignments. 

By default, roast uses multiz instead of multic. roast only utilizes one reference, that is human in this case. Input alignments with human are ensured single coverage on human, so multiz can be used.
